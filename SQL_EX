//1. Создать таблицу
CREATE TABLE book (
    book_id INT PRIMARY KEY AUTO_INCREMENT,
    title	VARCHAR(50),
    author	VARCHAR(30),
    price	DECIMAL(8, 2),
    amount	INT
);
//2.Занесите новую строку в таблицу book:
INSERT INTO book (book_id, title, author, price, amount)
VALUES (1,'Мастер и Маргарита', 'Булгаков М.А.', 670.99, 3);

//3.INSERT book
VALUES (2, 'Белая гвардия', 'Булгаков М.А.', 540.50, 5),
(3,'Идиот', 'Достоевский Ф.М.', 460.00, 10),
(4, 'Братья Карамазовы', 'Достоевский Ф.М.', 799.01, 2);


//4.
SELECT author, title, price FROM book
//5. Выбрать названия книг и авторов из таблицы book, для поля title задать имя(псевдоним) Название, для поля author –  Автор. 

SELECT title AS Название, author AS Автор
FROM book;

//6.
Для упаковки каждой книги требуется один лист бумаги, цена которого 1 рубль 65 копеек. 
Посчитать стоимость упаковки для каждой книги (сколько денег потребуется, чтобы упаковать все экземпляры книги). В запросе вывести название книги, ее количество и стоимость упаковки, последний столбец назвать pack. 
SELECT title, amount,
       amount * 1.65 AS pack
FROM book;

//7.В конце года цену всех книг на складе пересчитывают – снижают ее на 30%. Написать SQL запрос, который из таблицы book выбирает названия, авторов, количества и вычисляет новые цены книг. Столбец с новой ценой назвать new_price, цену округлить до 2-х знаков после запятой.

SELECT title, author, amount,
ROUND((price*0.7),2) AS new_price
FROM book

//8.При анализе продаж книг выяснилось, что наибольшей популярностью пользуются книги Михаила Булгакова, на втором месте книги Сергея Есенина. Исходя из этого решили поднять цену книг Булгакова на 10%, а цену книг Есенина - на 5%. Написать запрос, куда включить автора, название книги и новую цену, последний столбец назвать new_price. Значение округлить до двух знаков после запятой.

SELECT author, title, 
ROUND(IF(author='Булгаков М.А.',price*1.1, IF(author = 'Есенин С.А.',price*1.05, price)), 2) AS new_price
FROM book

//9.Вывести автора, название  и цены тех книг, количество которых меньше 10.
SELECT author,title, price
FROM book
WHERE amount<10;

//10. Вывести название, автора,  цену  и количество всех книг, цена которых меньше 500 или больше 600, а стоимость всех экземпляров этих книг больше или равна 5000.

SELECT title, author, price, amount 
FROM book
WHERE (price <500 OR price>600) AND price*amount >= 5000;


//11.Вывести название и авторов тех книг, цены которых принадлежат интервалу от 540.50 до 800 (включая границы),  а количество или 2, или 3, или 5, или 7 .
SELECT title, author
FROM book
WHERE (price BETWEEN 540.50 AND 800) AND amount IN (2,3,5,7);
  
//12.
Вывести  автора и название  книг, количество которых принадлежит интервалу от 2 до 14 (включая границы). Информацию  отсортировать сначала по авторам (в обратном алфавитном порядке), а затем по названиям книг (по алфавиту).

SELECT author, title 
FROM book
WHERE amount BETWEEN 2 AND 14
ORDER BY author DESC, title;

//13. Вывести название и автора тех книг, название которых состоит из двух и более слов, а инициалы автора содержат букву «С». Считать, что в названии слова отделяются друг от друга пробелами и не содержат знаков препинания, между фамилией автора и инициалами обязателен пробел, инициалы записываются без пробела в формате: буква, точка, буква, точка. Информацию отсортировать по названию книги в алфавитном порядке.
SELECT title, author
FROM book
WHERE title LIKE '_% %_' AND (author LIKE '%_С.%' OR author LIKE '%_%.С')
ORDER BY title;
//14.Магазин счёл, что классика уже не пользуется популярностью, поэтому необходимо в выборке:

1. Сменить всех авторов на "Донцова Дарья".

2. К названию каждой книги в начале дописать "Евлампия Романова и".

3. Цену поднять на 42%.

4. Отсортировать по убыванию цены и убыванию названия.


SELECT 
    "Донцова Дарья" AS author, 
    CONCAT("Евлампия Романова и ", title) AS title, 
    round((price * 1.42),2) AS price
FROM book
ORDER BY 3 DESC, 2 DESC

//15.Посчитать, количество различных книг и количество экземпляров книг каждого автора , хранящихся на складе.  Столбцы назвать Автор, Различных_книг и Количество_экземпляров соответственно.

SELECT author AS Автор,
COUNT(author) AS Различных_книг,
SUM(amount) AS Количество_экземпляров
FROM book
GROUP BY author

//16. Вывести фамилию и инициалы автора, минимальную, максимальную и среднюю цену книг каждого автора . Вычисляемые столбцы назвать Минимальная_цена, Максимальная_цена и Средняя_цена соответственно.

SELECT author,
MIN(price) AS Минимальная_цена,
MAX(price) AS Максимальная_цена,
AVG(price) AS Средняя_цена
FROM book
GROUP BY author;


//17.Для каждого автора вычислить суммарную стоимость книг S (имя столбца Стоимость), а также вычислить налог на добавленную стоимость  для полученных сумм (имя столбца НДС ) , который включен в стоимость и составляет k = 18%,  а также стоимость книг  (Стоимость_без_НДС) без него. Значения округлить до двух знаков после запятой. В запросе для расчета НДС(tax)  и Стоимости без НДС(S_without_tax) использовать следующие формулы:

SELECT author, 
    SUM(price*amount) AS Стоимость, 
    ROUND(SUM(price*amount)*0.18 / 1.18, 2) AS НДС,
    ROUND(SUM(price*amount) / 1.18,2) AS Стоимость_без_НДС
FROM book
GROUP BY author;


//18.
Вывести  цену самой дешевой книги, цену самой дорогой и среднюю цену уникальных книг на складе. Названия столбцов Минимальная_цена, Максимальная_цена, Средняя_цена соответственно. Среднюю цену округлить до двух знаков после запятой.
SELECT  MIN(price) AS Минимальная_цена,
MAX(price) AS Максимальная_цена, ROUND(AVG(DISTINCT price),2) AS Средняя_цена
FROM book;
//19.Вычислить среднюю цену и суммарную стоимость тех книг, количество экземпляров которых принадлежит интервалу от 5 до 14, включительно. Столбцы назвать Средняя_цена и Стоимость, значения округлить до 2-х знаков после запятой.
SELECT 
ROUND(AVG(price),2) AS Средняя_цена,
SUM(ROUND((price*amount),2)) AS Стоимость
FROM book
WHERE amount BETWEEN 5 AND 14

//20.Посчитать стоимость всех экземпляров каждого автора без учета книг «Идиот» и «Белая гвардия». 
В результат включить только тех авторов, у которых суммарная стоимость книг (без учета книг «Идиот» и «Белая гвардия») более 5000 руб.
 Вычисляемый столбец назвать Стоимость. Результат отсортировать по убыванию стоимости.

SELECT author,
SUM(price*amount) AS Стоимость
FROM book
WHERE title <> 'Идиот' OR 'Белая гвардия'
GROUP BY author
HAVING SUM(price*amount) > 5000
ORDER BY author DESC;

//21. Узнать сколько авторов, у которых есть книги со стоимостью более 500 и количеством более 1 шт на складе, при количестве различных названий произведений не менее 2-х.
 Вывести автора, количество различных произведений автора, минимальную цену и количество книг на складе.

 SELECT author, 
Count(title) AS Количество_произведений , 
 MIN(price) AS Минимальная_цена,
 SUM(amount) AS Число_книг
FROM book
WHERE price > 500 AND amount > 1
GROUP BY author
HAVING COUNT(title) > 1

//22.
Вывести информацию (автора, название и цену) о  книгах, цены которых меньше или равны средней цене книг на складе. Информацию вывести в отсортированном по убыванию цены виде. Среднее вычислить как среднее по цене книги.
SELECT author, title, price 
FROM book
WHERE price <= (
         SELECT AVG(price) 
         FROM book
      )
order by price DESC;


//23.Вывести информацию (автора, название и цену) о тех книгах, цены которых превышают минимальную цену книги на складе не более чем на 150 рублей в отсортированном по возрастанию цены виде.

SELECT author, title, price
FROM book
WHERE ABS(price - (SELECT MIN(price) FROM book)) <= 150
ORDER BY price;

//24.
Вывести информацию (автора, книгу и количество) о тех книгах, количество экземпляров которых в таблице book не дублируется.

SELECT author, title, amount
FROM book
WHERE amount IN (SELECT amount 
        FROM book 
        GROUP BY amount
    HAVING COUNT(amount)=1);

//25.
Вывести информацию о книгах(автор, название, цена), цена которых меньше самой большой из минимальных цен, вычисленных для каждого автора.
SELECT author, title, price
FROM book
WHERE price < ANY(
        SELECT MIN(price) 
        FROM book 
        GROUP BY author 
      );
      
      
       --1. Вывести всех работников чьи зарплаты есть в базе, вместе с зарплатами.
select * from employees;
select * from salary_1;

select employee_name, monthly_salary from employees inner join
salary_1
on employees.id=salary_1.id ;

--2. Вывести всех работников у которых ЗП меньше 2000.
select employee_name, monthly_salary from employees inner joi
salary_1
on employees.id=salary_1.id 
where monthly_salary < 2000;

--3. Вывести все зарплатные позиции, но работник по ним не назначен. (ЗП есть, но не понятно кто её получает.)
select monthly_salary, roles_employee.employee_id from salary_1 
join employee_salary on salary_1.id = employee_salary.salary_id
left join roles_employee on roles_employee.employee_id = employee_salary.employee_id
where role_id is null;

--4. Вывести все зарплатные позиции  меньше 2000 но работник по ним не назначен. (ЗП есть, но не понятно кто её получает.)

select monthly_salary, roles_employee.employee_id from salary_1 
join employee_salary on salary_1.id = employee_salary.salary_id
left join roles_employee on roles_employee.employee_id = employee_salary.employee_id
where role_id is null and monthly_salary < 2000 ;
--5. Найти всех работников кому не начислена ЗП.
select employee_name,employee_salary.employee_id,monthly_salary from employees
left join  roles_employee on employees.id=roles_employee.employee_id 
left join employee_salary on roles_employee.employee_id = employee_salary.employee_id
left join salary_1 on employee_salary.employee_id=salary_1.id
where employee_salary.employee_id is null;

 --6. Вывести всех работников с названиями их должности.
select employee_name, role_name from employees inner join roles_employee
on 
employees.id =employee_id
join roles on roles.id= roles_employee.role_id;

--7. Вывести имена и должность только Java разработчиков.
select employee_name, role_name from employees inner join roles_employee
on 
employees.id =employee_id
join roles on roles.id= roles_employee.role_id
where role_name LIKE '%Java developer%'

--.8. Вывести имена и должность только Python разработчиков.
select employee_name, role_name from employees inner join roles_employee
on 
employees.id =employee_id
join roles on roles.id= roles_employee.role_id
where role_name LIKE '%Python developer%';
--9. Вывести имена и должность всех QA инженеров.
select employee_name, role_name from employees inner join roles_employee
on 
employees.id =employee_id
join roles on roles.id= roles_employee.role_id
where role_name LIKE '%QA engineer%';
-- 10. Вывести имена и должность ручных QA инженеров.
select employee_name, role_name from employees inner join roles_employee
on 
employees.id =employee_id
join roles on roles.id= roles_employee.role_id
where role_name LIKE '%Manual QA engineer%';
--11.Вывести имена и должность автоматизаторов QA
select employee_name, role_name from employees inner join roles_employee
on 
employees.id =employee_id
join roles on roles.id= roles_employee.role_id
where role_name LIKE '%Automation QA engineer%';
--12. Вывести имена и зарплаты Junior специалистов
select employee_name, role_name, monthly_salary from employees 
join employee_salary on employees.id = employee_salary.employee_id
join salary_1 on employee_salary.salary_id = salary_1.id 
join roles_employee on employees.id= roles_employee.employee_id
join roles on roles.id= roles_employee.role_id 
where role_name like '%Junior%';
--13. Вывести имена и зарплаты Middle специалистов
select employee_name, role_name, monthly_salary from employees 
join employee_salary on employees.id = employee_salary.employee_id
join salary_1 on employee_salary.salary_id = salary_1.id 
join roles_employee on employees.id= roles_employee.employee_id
join roles on roles.id= roles_employee.role_id 
where role_name like '%Middle%';

--14. Вывести имена и зарплаты Senior специалистов
select employee_name, role_name, monthly_salary from employees 
join employee_salary on employees.id = employee_salary.employee_id
join salary_1 on employee_salary.salary_id = salary_1.id 
join roles_employee on employees.id= roles_employee.employee_id
join roles on roles.id= roles_employee.role_id 
where role_name like '%Senior%';
--15. Вывести зарплаты Java разработчиков
select  role_name, monthly_salary from employees 
join employee_salary on employees.id = employee_salary.employee_id
join salary_1 on employee_salary.salary_id = salary_1.id 
join roles_employee on employees.id= roles_employee.employee_id
join roles on roles.id= roles_employee.role_id 
where role_name like '%Java developer%';
-- 16. Вывести зарплаты Python разработчиков
select  role_name, monthly_salary from employees 
join employee_salary on employees.id = employee_salary.employee_id
join salary_1 on employee_salary.salary_id = salary_1.id 
join roles_employee on employees.id= roles_employee.employee_id
join roles on roles.id= roles_employee.role_id 
where role_name like '%Python developer%';
--17. Вывести имена и зарплаты Junior Python разработчиков

select employee_name, role_name, monthly_salary from employees 
join employee_salary on employees.id = employee_salary.employee_id
join salary_1 on employee_salary.salary_id = salary_1.id 
join roles_employee on employees.id= roles_employee.employee_id
join roles on roles.id= roles_employee.role_id 
where role_name like '%Junior Python developer%';


--18.Вывести имена и зарплаты Middle JS разработчиков
select employee_name, role_name, monthly_salary from employees 
join employee_salary on employees.id = employee_salary.employee_id
join salary_1 on employee_salary.salary_id = salary_1.id 
join roles_employee on employees.id= roles_employee.employee_id
join roles on roles.id= roles_employee.role_id 
where role_name like '%Middle JavaScript developer%';

-- 19. Вывести имена и зарплаты Senior Java разработчиков
select employee_name, role_name, monthly_salary from employees 
join employee_salary on employees.id = employee_salary.employee_id
join salary_1 on employee_salary.salary_id = salary_1.id 
join roles_employee on employees.id= roles_employee.employee_id
join roles on roles.id= roles_employee.role_id 
where role_name like '%Senior JavaScript developer%';
--20.Вывести зарплаты Junior QA инженеров
select  role_name, monthly_salary from employees 
join employee_salary on employees.id = employee_salary.employee_id
join salary_1 on employee_salary.salary_id = salary_1.id 
join roles_employee on employees.id= roles_employee.employee_id
join roles on roles.id= roles_employee.role_id 
where role_name like '%Junior% QA engineer%';
 --21. Вывести среднюю зарплату всех Junior специалистов
select  AVG (monthly_salary) from salary_1
join employee_salary on salary_1.id = employee_salary.salary_id
join roles_employee on employee_salary.id = roles_employee.employee_id
join roles on roles.id= roles_employee.role_id 
where role_name like '%Junior%';
--22. Вывести сумму зарплат JS разработчиков
select  sum (monthly_salary) from salary_1
join employee_salary on salary_1.id = employee_salary.salary_id
join roles_employee on employee_salary.id = roles_employee.employee_id
join roles on roles.id= roles_employee.role_id 
where role_name like '%Java developer%';
--23. Вывести минимальную ЗП QA инженеров
select min(monthly_salary) from salary join employee_salary on salary.id = employee_salary.salary_id 
join roles_employee on roles_employee.employee_id = employee_salary.employee_id 
join roles on roles_employee.role_id = roles.id
where role_name like '% QA engineer';
----24. Вывести максимальную ЗП QA инженеров
select max(monthly_salary) from salary join employee_salary on salary.id = employee_salary.salary_id 
join roles_employee on roles_employee.employee_id = employee_salary.employee_id 
join roles on roles_employee.role_id = roles.id
where role_name like '% QA engineer';

--25. Вывести количество QA инженеров
select count(employees.id) from employees join roles_employee on 
employees.id=roles_employee.employee_id
join roles on roles_employee.role_id=roles.id 
where role_name like '%QA engineer%';

--26. Вывести количество Middle специалистов.
select count(employees.id) from employees join roles_employee on 
employees.id=roles_employee.employee_id
join roles on roles_employee.role_id=roles.id 
where role_name like '%Middle%';

--27. Вывести количество разработчиков
select count(employees.id) from employees join roles_employee on 
employees.id=roles_employee.employee_id
join roles on roles_employee.role_id=roles.id 
where role_name like '%developer%';

--28. Вывести фонд (сумму) зарплаты разработчиков

select count (monthly_salary) from salary_1 
join employee_salary on  salary_1.id=employee_salary.salary_id
join roles_employee on roles_employee.employee_id =employee_salary.employee_id 
join roles on   roles.id =roles_employee.role_id
where role_name like '%developer%';

--29. Вывести имена, должности и ЗП всех специалистов по возрастанию

select employee_name, role_name, monthly_salary from employees 
join salary_1 on employees.id= salary_1.id 
join employee_salary on salary_1.id = employee_salary.salary_id
left join roles_employee on roles_employee.employee_id = employee_salary.employee_id
join roles on roles_employee.role_id = roles.id 
order by monthly_salary;

--30. Вывести имена, должности и ЗП всех специалистов по возрастанию у специалистов у которых ЗП от 1700 до 2300
select employee_name, role_name, monthly_salary from employees 
join salary_1 on employees.id= salary_1.id 
join employee_salary on salary_1.id = employee_salary.salary_id
left join roles_employee on roles_employee.employee_id = employee_salary.employee_id
join roles on roles_employee.role_id = roles.id 
where monthly_salary between 1700 and 2300
order by monthly_salary;
--31. Вывести имена, должности и ЗП всех специалистов по возрастанию у специалистов у которых ЗП меньше 2300
select employee_name, role_name, monthly_salary from employees 
join salary_1 on employees.id= salary_1.id 
join employee_salary on salary_1.id = employee_salary.salary_id
left join roles_employee on roles_employee.employee_id = employee_salary.employee_id
join roles on roles_employee.role_id = roles.id 
where monthly_salary < 2300
order by monthly_salary;
--32. Вывести имена, должности и ЗП всех специалистов по возрастанию у специалистов у которых ЗП равна 1100, 1500, 2000
select employee_name, role_name, monthly_salary from employees 
join salary_1 on employees.id= salary_1.id 
join employee_salary on salary_1.id = employee_salary.salary_id
left join roles_employee on roles_employee.employee_id = employee_salary.employee_id
join roles on roles_employee.role_id = roles.id 
where monthly_salary in (1100,1500,2000)
order by monthly_salary;
