//1. Создать таблицу
CREATE TABLE book (
    book_id INT PRIMARY KEY AUTO_INCREMENT,
    title	VARCHAR(50),
    author	VARCHAR(30),
    price	DECIMAL(8, 2),
    amount	INT
);
//2.Занесите новую строку в таблицу book:
INSERT INTO book (book_id, title, author, price, amount)
VALUES (1,'Мастер и Маргарита', 'Булгаков М.А.', 670.99, 3);

//3.INSERT book
VALUES (2, 'Белая гвардия', 'Булгаков М.А.', 540.50, 5),
(3,'Идиот', 'Достоевский Ф.М.', 460.00, 10),
(4, 'Братья Карамазовы', 'Достоевский Ф.М.', 799.01, 2);


//4.
SELECT author, title, price FROM book
//5. Выбрать названия книг и авторов из таблицы book, для поля title задать имя(псевдоним) Название, для поля author –  Автор. 

SELECT title AS Название, author AS Автор
FROM book;

//6.
Для упаковки каждой книги требуется один лист бумаги, цена которого 1 рубль 65 копеек. 
Посчитать стоимость упаковки для каждой книги (сколько денег потребуется, чтобы упаковать все экземпляры книги). В запросе вывести название книги, ее количество и стоимость упаковки, последний столбец назвать pack. 
SELECT title, amount,
       amount * 1.65 AS pack
FROM book;

//7.В конце года цену всех книг на складе пересчитывают – снижают ее на 30%. Написать SQL запрос, который из таблицы book выбирает названия, авторов, количества и вычисляет новые цены книг. Столбец с новой ценой назвать new_price, цену округлить до 2-х знаков после запятой.

SELECT title, author, amount,
ROUND((price*0.7),2) AS new_price
FROM book

//8.При анализе продаж книг выяснилось, что наибольшей популярностью пользуются книги Михаила Булгакова, на втором месте книги Сергея Есенина. Исходя из этого решили поднять цену книг Булгакова на 10%, а цену книг Есенина - на 5%. Написать запрос, куда включить автора, название книги и новую цену, последний столбец назвать new_price. Значение округлить до двух знаков после запятой.

SELECT author, title, 
ROUND(IF(author='Булгаков М.А.',price*1.1, IF(author = 'Есенин С.А.',price*1.05, price)), 2) AS new_price
FROM book

//9.Вывести автора, название  и цены тех книг, количество которых меньше 10.
SELECT author,title, price
FROM book
WHERE amount<10;

//10. Вывести название, автора,  цену  и количество всех книг, цена которых меньше 500 или больше 600, а стоимость всех экземпляров этих книг больше или равна 5000.

SELECT title, author, price, amount 
FROM book
WHERE (price <500 OR price>600) AND price*amount >= 5000;


//11.Вывести название и авторов тех книг, цены которых принадлежат интервалу от 540.50 до 800 (включая границы),  а количество или 2, или 3, или 5, или 7 .
SELECT title, author
FROM book
WHERE (price BETWEEN 540.50 AND 800) AND amount IN (2,3,5,7);
  
//12.
Вывести  автора и название  книг, количество которых принадлежит интервалу от 2 до 14 (включая границы). Информацию  отсортировать сначала по авторам (в обратном алфавитном порядке), а затем по названиям книг (по алфавиту).

SELECT author, title 
FROM book
WHERE amount BETWEEN 2 AND 14
ORDER BY author DESC, title;

//13. Вывести название и автора тех книг, название которых состоит из двух и более слов, а инициалы автора содержат букву «С». Считать, что в названии слова отделяются друг от друга пробелами и не содержат знаков препинания, между фамилией автора и инициалами обязателен пробел, инициалы записываются без пробела в формате: буква, точка, буква, точка. Информацию отсортировать по названию книги в алфавитном порядке.
SELECT title, author
FROM book
WHERE title LIKE '_% %_' AND (author LIKE '%_С.%' OR author LIKE '%_%.С')
ORDER BY title;
//14.Магазин счёл, что классика уже не пользуется популярностью, поэтому необходимо в выборке:

1. Сменить всех авторов на "Донцова Дарья".

2. К названию каждой книги в начале дописать "Евлампия Романова и".

3. Цену поднять на 42%.

4. Отсортировать по убыванию цены и убыванию названия.


SELECT 
    "Донцова Дарья" AS author, 
    CONCAT("Евлампия Романова и ", title) AS title, 
    round((price * 1.42),2) AS price
FROM book
ORDER BY 3 DESC, 2 DESC

//15.Посчитать, количество различных книг и количество экземпляров книг каждого автора , хранящихся на складе.  Столбцы назвать Автор, Различных_книг и Количество_экземпляров соответственно.

SELECT author AS Автор,
COUNT(author) AS Различных_книг,
SUM(amount) AS Количество_экземпляров
FROM book
GROUP BY author

//16. Вывести фамилию и инициалы автора, минимальную, максимальную и среднюю цену книг каждого автора . Вычисляемые столбцы назвать Минимальная_цена, Максимальная_цена и Средняя_цена соответственно.

SELECT author,
MIN(price) AS Минимальная_цена,
MAX(price) AS Максимальная_цена,
AVG(price) AS Средняя_цена
FROM book
GROUP BY author;


//17.Для каждого автора вычислить суммарную стоимость книг S (имя столбца Стоимость), а также вычислить налог на добавленную стоимость  для полученных сумм (имя столбца НДС ) , который включен в стоимость и составляет k = 18%,  а также стоимость книг  (Стоимость_без_НДС) без него. Значения округлить до двух знаков после запятой. В запросе для расчета НДС(tax)  и Стоимости без НДС(S_without_tax) использовать следующие формулы:

SELECT author, 
    SUM(price*amount) AS Стоимость, 
    ROUND(SUM(price*amount)*0.18 / 1.18, 2) AS НДС,
    ROUND(SUM(price*amount) / 1.18,2) AS Стоимость_без_НДС
FROM book
GROUP BY author;


//18.
Вывести  цену самой дешевой книги, цену самой дорогой и среднюю цену уникальных книг на складе. Названия столбцов Минимальная_цена, Максимальная_цена, Средняя_цена соответственно. Среднюю цену округлить до двух знаков после запятой.
SELECT  MIN(price) AS Минимальная_цена,
MAX(price) AS Максимальная_цена, ROUND(AVG(DISTINCT price),2) AS Средняя_цена
FROM book;
//19.Вычислить среднюю цену и суммарную стоимость тех книг, количество экземпляров которых принадлежит интервалу от 5 до 14, включительно. Столбцы назвать Средняя_цена и Стоимость, значения округлить до 2-х знаков после запятой.
SELECT 
ROUND(AVG(price),2) AS Средняя_цена,
SUM(ROUND((price*amount),2)) AS Стоимость
FROM book
WHERE amount BETWEEN 5 AND 14

//20.Посчитать стоимость всех экземпляров каждого автора без учета книг «Идиот» и «Белая гвардия». 
В результат включить только тех авторов, у которых суммарная стоимость книг (без учета книг «Идиот» и «Белая гвардия») более 5000 руб.
 Вычисляемый столбец назвать Стоимость. Результат отсортировать по убыванию стоимости.

SELECT author,
SUM(price*amount) AS Стоимость
FROM book
WHERE title <> 'Идиот' OR 'Белая гвардия'
GROUP BY author
HAVING SUM(price*amount) > 5000
ORDER BY author DESC;

//21. Узнать сколько авторов, у которых есть книги со стоимостью более 500 и количеством более 1 шт на складе, при количестве различных названий произведений не менее 2-х.
 Вывести автора, количество различных произведений автора, минимальную цену и количество книг на складе.

 SELECT author, 
Count(title) AS Количество_произведений , 
 MIN(price) AS Минимальная_цена,
 SUM(amount) AS Число_книг
FROM book
WHERE price > 500 AND amount > 1
GROUP BY author
HAVING COUNT(title) > 1

//22.
Вывести информацию (автора, название и цену) о  книгах, цены которых меньше или равны средней цене книг на складе. Информацию вывести в отсортированном по убыванию цены виде. Среднее вычислить как среднее по цене книги.
SELECT author, title, price 
FROM book
WHERE price <= (
         SELECT AVG(price) 
         FROM book
      )
order by price DESC;


//23.Вывести информацию (автора, название и цену) о тех книгах, цены которых превышают минимальную цену книги на складе не более чем на 150 рублей в отсортированном по возрастанию цены виде.

SELECT author, title, price
FROM book
WHERE ABS(price - (SELECT MIN(price) FROM book)) <= 150
ORDER BY price;

//24.
Вывести информацию (автора, книгу и количество) о тех книгах, количество экземпляров которых в таблице book не дублируется.

SELECT author, title, amount
FROM book
WHERE amount IN (SELECT amount 
        FROM book 
        GROUP BY amount
    HAVING COUNT(amount)=1);

//25.
Вывести информацию о книгах(автор, название, цена), цена которых меньше самой большой из минимальных цен, вычисленных для каждого автора.
SELECT author, title, price
FROM book
WHERE price < ANY(
        SELECT MIN(price) 
        FROM book 
        GROUP BY author 
      );
      
//26.

Посчитать сколько и каких экземпляров книг нужно заказать поставщикам, чтобы на складе стало одинаковое количество экземпляров каждой книги, равное значению самого большего количества экземпляров одной книги на складе. Вывести название книги, ее автора, текущее количество экземпляров на складе и количество заказываемых экземпляров книг. Последнему столбцу присвоить имя Заказ. В результат не включать книги, которые заказывать не нужно.
SELECT title, author, amount, 
(SELECT MAX(amount) FROM book)-amount AS Заказ
FROM book 
WHERE amount NOT IN ( SELECT MAX( amount ) FROM book );

//27. Определить стоимость покупки, если купить самую дешевую книгу каждого автора.
SELECT SUM(price) AS покупки 
 FROM book
 WHERE price IN (SELECT MIN(PRICE) 
        FROM book 
        GROUP BY author)


 //28.Создать таблицу поставка (supply), которая имеет ту же структуру, что и таблиц book.
 CREATE TABLE supply (
    supply_id INT PRIMARY KEY AUTO_INCREMENT, 
    title VARCHAR(50),
    author VARCHAR(30),
    price DECIMAL(8,2),
    amount INT
);

 //29. Занести данные в таблицу
 INSERT INTO supply (title, author, price, amount)
 VALUES ( 'Лирика','Пастернак Б.Л.',518.99, 2),
        ('Черный человек', 'Есенин С.А.',570.20, 6),
        ('Белая гвардия', 'Булгаков М.А.', 540.50, 7),
        ('Идиот', 'Достоевский Ф.М.', 360.80,3);

//30. Занести из таблицы supply в таблицу book только те книги, авторов которых нет в  book.
INSERT INTO book (author,title,price, amount)
SELECT title, author, price, amount
FROM supply 
WHERE author NOT IN (
        SELECT author 
        FROM book
      );

SELECT * FROM book;

//31.Добавить из таблицы supply в таблицу book, все книги, кроме книг, написанных Булгаковым М.А. и Достоевским Ф.М.
INSERT INTO book (title, author, price, amount) 
SELECT title, author, price, amount 
FROM supply
WHERE author not in  ('Булгаков М.А.','Достоевский Ф.М.');

//32. Уменьшить на 10% цену тех книг в таблице book, количество которых принадлежит интервалу от 5 до 10, включая границы.
UPDATE book 
SET price = 0.9*price 
WHERE amount BETWEEN 5 AND 10;

SELECT * FROM book;


//33. UPDATE book
SET buy = IF(buy > amount, buy = amount, buy),
    price = IF(buy = 0, price * 0.9, price * 1);
   
SELECT * FROM book;
//34. В таблице book необходимо скорректировать значение для покупателя в столбце buy таким образом, чтобы оно не превышало количество экземпляров книг, указанных в столбце amount. А цену тех книг, которые покупатель не заказывал, снизить на 10%.
UPDATE book 
SET buy = IF (buy>= amount,amount,buy) , 
price = IF(buy=0, price*0.9, price);

   
SELECT * FROM book;

//35. Для тех книг в таблице book , которые есть в таблице supply, не только увеличить их количество в таблице book ( увеличить их количество на значение столбца amountтаблицы supply), но и пересчитать их цену (для каждой книги найти сумму цен из таблиц book и supply и разделить на 2).
UPDATE book, supply 
SET book.amount = book.amount + supply.amount,
book.price= (book.price + supply.price)/2
WHERE book.title = supply.title
AND book.author = supply.author;
SELECT * FROM book;


//36. Удалить из таблицы supply книги тех авторов, общее количество экземпляров книг которых в таблице book превышает 10.

DELETE FROM supply 
WHERE author IN (
SELECT author 
FROM book
GROUP BY author
 HAVING SUM(amount)>10);


SELECT * FROM supply;
//37. Создать таблицу заказ (ordering), куда включить авторов и названия тех книг, количество экземпляров которых в таблице book меньше среднего количества экземпляров книг в таблице book. В таблицу включить столбец   amount, в котором для всех книг указать одинаковое значение - среднее количество экземпляров книг в таблице book.
CREATE TABLE ordering AS
SELECT author, title, 
   (
    SELECT ROUND(AVG(amount)) 
    FROM book
   ) AS amount
FROM book
WHERE amount < (
    SELECT ROUND(AVG(amount)) 
    FROM book
   );

SELECT * FROM ordering;

//38. Создать таблицу заказ (ordering), куда включить авторов и названия тех книг, количество которых в таблице book меньше максимального (15). Для всех книг в таблице ordering указать такое значение, которое позволит выровнять количество книг до максимального в таблице book.
CREATE TABLE ordering AS
SELECT author, title,
(SELECT MAX(amount)
       FROM book)-amount AS amount 
       
 FROM book
 WHERE amount NOT IN (SELECT MAX(amount) FROM book);
 
SELECT * FROM book;
SELECT * FROM ordering;


//39.
Вывести из таблицы trip информацию о командировках тех сотрудников, фамилия которых заканчивается на букву «а», в отсортированном по убыванию даты последнего дня командировки виде. В результат включить столбцы name, city, per_diem, date_first, date_last.

SELECT name, city, per_diem, date_first, date_last
FROM trip
WHERE name LIKE ('%а _._.')
ORDER BY date_last DESC;

//40. Вывести в алфавитном порядке фамилии и инициалы тех сотрудников, которые были в командировке в Москве.
SELECT DISTINCT name 
FROM trip
WHERE city = 'Москва'
ORDER BY name;


//41.Для каждого города посчитать, сколько раз сотрудники в нем были.  Информацию вывести в отсортированном в алфавитном порядке по названию городов. Вычисляемый столбец назвать Количество. 
SELECT city,
COUNT(city) AS Количество 
FROM trip
GROUP BY city
ORDER BY city;

//42.Вывести два города, в которых чаще всего были в командировках сотрудники. Вычисляемый столбец назвать Количество.
SELECT city, 
COUNT(name) AS Количество
FROM trip
GROUP BY city
ORDER BY Количество desc
LIMIT 2;

//43. Вывести информацию о командировках во все города кроме Москвы и Санкт-Петербурга (фамилии и инициалы сотрудников, город ,  длительность командировки в днях, при этом первый и последний день относится к периоду командировки). Последний столбец назвать Длительность. Информацию вывести в упорядоченном по убыванию длительности поездки, а потом по убыванию названий городов (в обратном алфавитном порядке).
SELECT name, city,
DATEDIFF(date_last, date_first)+1 AS 'Длительность'
FROM trip
WHERE city NOT IN ('Москва','Санкт-Петербург')
ORDER BY 3 DESC, 2 desc
//44. Вывести информацию о командировках сотрудника(ов), которые были самыми короткими по времени. В результат включить столбцы name, city, date_first, date_last.
SELECT name, city, date_first, date_last 
FROM trip
WHERE DATEDIFF(date_last, date_first) IN (SELECT MIN(DATEDIFF(date_last, date_first)) FROM trip) 


//45.
SELECT name, city, date_first, date_last
FROM trip
WHERE MONTH(date_first)=MONTH(date_last)
ORDER BY city, name


//46. Вывести название месяца и количество командировок для каждого месяца. Считаем, что командировка относится к некоторому месяцу, если она началась в этом месяце. Информацию вывести сначала в отсортированном по убыванию количества, а потом в алфавитном порядке по названию месяца виде. Название столбцов – Месяц и Количество.
SELECT MONTHNAME(date_first) AS Месяц,
COUNt(MONTHNAME(date_first)) AS Количество
FROM trip
GROUP BY Месяц
ORDER BY  2 desc , 1;


//47. Вывести сумму суточных (произведение количества дней командировки и размера суточных) для командировок, первый день которых пришелся на февраль или март 2020 года. Значение суточных для каждой командировки занесено в столбец per_diem. Вывести фамилию и инициалы сотрудника, город, первый день командировки и сумму суточных. Последний столбец назвать Сумма. Информацию отсортировать сначала  в алфавитном порядке по фамилиям сотрудников, а затем по убыванию суммы суточных.
SELECT  name, city, date_first,
per_diem*(DATEDIFF(date_last,date_first)+1) AS Сумма
FROM trip
WHERE YEAR(date_first)=2020 and MONTH(date_first)=3 OR MONTH(date_first)=2
ORDER BY name,Сумма DESC;

//48.Вывести фамилию с инициалами и общую сумму суточных, полученных за все командировки для тех сотрудников, которые были в командировках больше чем 3 раза, в отсортированном по убыванию сумм суточных виде. Последний столбец назвать Сумма.
SELECT name, 
SUM((DATEDIFF(date_last, date_first) + 1) * per_diem) AS Сумма
FROM trip
WHERE name IN
(SELECT name
FROM trip
GROUP BY name HAVING COUNT(name) > 3)
 GROUP BY name
ORDER BY 2 DESC;



//49. CREATE TABLE fine(
    fine_id int primary key auto_increment,
    name VARCHAR(30),
    number_plate VARCHAR(6),
    violation VARCHAR(50),
    sum_fine DECIMAL(8,2),
    date_violation date,
    date_payment date );


//50. INSERT INTO fine (name, number_plate, violation, sum_fine, date_violation, date_payment)
VALUES ('Баранов П.Е.', 'Р523ВТ', 'Превышение скорости(от 40 до 60)',NULL,'2020-02-14', NULL),
       ('Абрамова К.А.', 'О111АВ','Проезд на запрещающий сигнал', NULL, '2020-02-23', NULL),
       ('Яковлев Г.Р.', 'Т330ТТ', 'Проезд на запрещающий сигнал', NULL, '2020-03-03', NULL);



//51. Занести в таблицу fine суммы штрафов, которые должен оплатить водитель, в соответствии с данными из таблицы traffic_violation. При этом суммы заносить только в пустые поля столбца  sum_fine.

UPDATE fine, traffic_violation AS tv
SET fine.sum_fine=tv.sum_fine
WHERE (fine.sum_fine IS NULL) AND fine.violation=tv.violation;

SELECT * FROM fine
      
       --1. Вывести всех работников чьи зарплаты есть в базе, вместе с зарплатами.
select * from employees;
select * from salary_1;

select employee_name, monthly_salary from employees inner join
salary_1
on employees.id=salary_1.id ;

--2. Вывести всех работников у которых ЗП меньше 2000.
select employee_name, monthly_salary from employees inner joi
salary_1
on employees.id=salary_1.id 
where monthly_salary < 2000;

--3. Вывести все зарплатные позиции, но работник по ним не назначен. (ЗП есть, но не понятно кто её получает.)
select monthly_salary, roles_employee.employee_id from salary_1 
join employee_salary on salary_1.id = employee_salary.salary_id
left join roles_employee on roles_employee.employee_id = employee_salary.employee_id
where role_id is null;

--4. Вывести все зарплатные позиции  меньше 2000 но работник по ним не назначен. (ЗП есть, но не понятно кто её получает.)

select monthly_salary, roles_employee.employee_id from salary_1 
join employee_salary on salary_1.id = employee_salary.salary_id
left join roles_employee on roles_employee.employee_id = employee_salary.employee_id
where role_id is null and monthly_salary < 2000 ;
--5. Найти всех работников кому не начислена ЗП.
select employee_name,employee_salary.employee_id,monthly_salary from employees
left join  roles_employee on employees.id=roles_employee.employee_id 
left join employee_salary on roles_employee.employee_id = employee_salary.employee_id
left join salary_1 on employee_salary.employee_id=salary_1.id
where employee_salary.employee_id is null;

 --6. Вывести всех работников с названиями их должности.
select employee_name, role_name from employees inner join roles_employee
on 
employees.id =employee_id
join roles on roles.id= roles_employee.role_id;

--7. Вывести имена и должность только Java разработчиков.
select employee_name, role_name from employees inner join roles_employee
on 
employees.id =employee_id
join roles on roles.id= roles_employee.role_id
where role_name LIKE '%Java developer%'

--.8. Вывести имена и должность только Python разработчиков.
select employee_name, role_name from employees inner join roles_employee
on 
employees.id =employee_id
join roles on roles.id= roles_employee.role_id
where role_name LIKE '%Python developer%';
--9. Вывести имена и должность всех QA инженеров.
select employee_name, role_name from employees inner join roles_employee
on 
employees.id =employee_id
join roles on roles.id= roles_employee.role_id
where role_name LIKE '%QA engineer%';
-- 10. Вывести имена и должность ручных QA инженеров.
select employee_name, role_name from employees inner join roles_employee
on 
employees.id =employee_id
join roles on roles.id= roles_employee.role_id
where role_name LIKE '%Manual QA engineer%';
--11.Вывести имена и должность автоматизаторов QA
select employee_name, role_name from employees inner join roles_employee
on 
employees.id =employee_id
join roles on roles.id= roles_employee.role_id
where role_name LIKE '%Automation QA engineer%';
--12. Вывести имена и зарплаты Junior специалистов
select employee_name, role_name, monthly_salary from employees 
join employee_salary on employees.id = employee_salary.employee_id
join salary_1 on employee_salary.salary_id = salary_1.id 
join roles_employee on employees.id= roles_employee.employee_id
join roles on roles.id= roles_employee.role_id 
where role_name like '%Junior%';
--13. Вывести имена и зарплаты Middle специалистов
select employee_name, role_name, monthly_salary from employees 
join employee_salary on employees.id = employee_salary.employee_id
join salary_1 on employee_salary.salary_id = salary_1.id 
join roles_employee on employees.id= roles_employee.employee_id
join roles on roles.id= roles_employee.role_id 
where role_name like '%Middle%';

--14. Вывести имена и зарплаты Senior специалистов
select employee_name, role_name, monthly_salary from employees 
join employee_salary on employees.id = employee_salary.employee_id
join salary_1 on employee_salary.salary_id = salary_1.id 
join roles_employee on employees.id= roles_employee.employee_id
join roles on roles.id= roles_employee.role_id 
where role_name like '%Senior%';
--15. Вывести зарплаты Java разработчиков
select  role_name, monthly_salary from employees 
join employee_salary on employees.id = employee_salary.employee_id
join salary_1 on employee_salary.salary_id = salary_1.id 
join roles_employee on employees.id= roles_employee.employee_id
join roles on roles.id= roles_employee.role_id 
where role_name like '%Java developer%';
-- 16. Вывести зарплаты Python разработчиков
select  role_name, monthly_salary from employees 
join employee_salary on employees.id = employee_salary.employee_id
join salary_1 on employee_salary.salary_id = salary_1.id 
join roles_employee on employees.id= roles_employee.employee_id
join roles on roles.id= roles_employee.role_id 
where role_name like '%Python developer%';
--17. Вывести имена и зарплаты Junior Python разработчиков

select employee_name, role_name, monthly_salary from employees 
join employee_salary on employees.id = employee_salary.employee_id
join salary_1 on employee_salary.salary_id = salary_1.id 
join roles_employee on employees.id= roles_employee.employee_id
join roles on roles.id= roles_employee.role_id 
where role_name like '%Junior Python developer%';


--18.Вывести имена и зарплаты Middle JS разработчиков
select employee_name, role_name, monthly_salary from employees 
join employee_salary on employees.id = employee_salary.employee_id
join salary_1 on employee_salary.salary_id = salary_1.id 
join roles_employee on employees.id= roles_employee.employee_id
join roles on roles.id= roles_employee.role_id 
where role_name like '%Middle JavaScript developer%';

-- 19. Вывести имена и зарплаты Senior Java разработчиков
select employee_name, role_name, monthly_salary from employees 
join employee_salary on employees.id = employee_salary.employee_id
join salary_1 on employee_salary.salary_id = salary_1.id 
join roles_employee on employees.id= roles_employee.employee_id
join roles on roles.id= roles_employee.role_id 
where role_name like '%Senior JavaScript developer%';
--20.Вывести зарплаты Junior QA инженеров
select  role_name, monthly_salary from employees 
join employee_salary on employees.id = employee_salary.employee_id
join salary_1 on employee_salary.salary_id = salary_1.id 
join roles_employee on employees.id= roles_employee.employee_id
join roles on roles.id= roles_employee.role_id 
where role_name like '%Junior% QA engineer%';
 --21. Вывести среднюю зарплату всех Junior специалистов
select  AVG (monthly_salary) from salary_1
join employee_salary on salary_1.id = employee_salary.salary_id
join roles_employee on employee_salary.id = roles_employee.employee_id
join roles on roles.id= roles_employee.role_id 
where role_name like '%Junior%';
--22. Вывести сумму зарплат JS разработчиков
select  sum (monthly_salary) from salary_1
join employee_salary on salary_1.id = employee_salary.salary_id
join roles_employee on employee_salary.id = roles_employee.employee_id
join roles on roles.id= roles_employee.role_id 
where role_name like '%Java developer%';
--23. Вывести минимальную ЗП QA инженеров
select min(monthly_salary) from salary join employee_salary on salary.id = employee_salary.salary_id 
join roles_employee on roles_employee.employee_id = employee_salary.employee_id 
join roles on roles_employee.role_id = roles.id
where role_name like '% QA engineer';
----24. Вывести максимальную ЗП QA инженеров
select max(monthly_salary) from salary join employee_salary on salary.id = employee_salary.salary_id 
join roles_employee on roles_employee.employee_id = employee_salary.employee_id 
join roles on roles_employee.role_id = roles.id
where role_name like '% QA engineer';

--25. Вывести количество QA инженеров
select count(employees.id) from employees join roles_employee on 
employees.id=roles_employee.employee_id
join roles on roles_employee.role_id=roles.id 
where role_name like '%QA engineer%';

--26. Вывести количество Middle специалистов.
select count(employees.id) from employees join roles_employee on 
employees.id=roles_employee.employee_id
join roles on roles_employee.role_id=roles.id 
where role_name like '%Middle%';

--27. Вывести количество разработчиков
select count(employees.id) from employees join roles_employee on 
employees.id=roles_employee.employee_id
join roles on roles_employee.role_id=roles.id 
where role_name like '%developer%';

--28. Вывести фонд (сумму) зарплаты разработчиков

select count (monthly_salary) from salary_1 
join employee_salary on  salary_1.id=employee_salary.salary_id
join roles_employee on roles_employee.employee_id =employee_salary.employee_id 
join roles on   roles.id =roles_employee.role_id
where role_name like '%developer%';

--29. Вывести имена, должности и ЗП всех специалистов по возрастанию

select employee_name, role_name, monthly_salary from employees 
join salary_1 on employees.id= salary_1.id 
join employee_salary on salary_1.id = employee_salary.salary_id
left join roles_employee on roles_employee.employee_id = employee_salary.employee_id
join roles on roles_employee.role_id = roles.id 
order by monthly_salary;

--30. Вывести имена, должности и ЗП всех специалистов по возрастанию у специалистов у которых ЗП от 1700 до 2300
select employee_name, role_name, monthly_salary from employees 
join salary_1 on employees.id= salary_1.id 
join employee_salary on salary_1.id = employee_salary.salary_id
left join roles_employee on roles_employee.employee_id = employee_salary.employee_id
join roles on roles_employee.role_id = roles.id 
where monthly_salary between 1700 and 2300
order by monthly_salary;
--31. Вывести имена, должности и ЗП всех специалистов по возрастанию у специалистов у которых ЗП меньше 2300
select employee_name, role_name, monthly_salary from employees 
join salary_1 on employees.id= salary_1.id 
join employee_salary on salary_1.id = employee_salary.salary_id
left join roles_employee on roles_employee.employee_id = employee_salary.employee_id
join roles on roles_employee.role_id = roles.id 
where monthly_salary < 2300
order by monthly_salary;
--32. Вывести имена, должности и ЗП всех специалистов по возрастанию у специалистов у которых ЗП равна 1100, 1500, 2000
select employee_name, role_name, monthly_salary from employees 
join salary_1 on employees.id= salary_1.id 
join employee_salary on salary_1.id = employee_salary.salary_id
left join roles_employee on roles_employee.employee_id = employee_salary.employee_id
join roles on roles_employee.role_id = roles.id 
where monthly_salary in (1100,1500,2000)
order by monthly_salary;
